import { NextRequest, NextResponse } from 'next/server'\nimport { getPrismaClient } from '@/lib/db'\n\n// Special endpoint to create a test payroll with employees\nexport async function POST(request: NextRequest) {\n  const prisma = getPrismaClient()\n  if (!prisma) {\n    return NextResponse.json(\n      { success: false, error: 'Database connection not available' },\n      { status: 503 }\n    )\n  }\n\n  try {\n    let createdEmployeeIds: string[] = []\n    let createdUserId: string | null = null\n\n    // Create test user if needed\n    const testUser = await prisma.user.upsert({\n      where: { email: 'payroll-test@example.com' },\n      update: {},\n      create: {\n        name: 'Payroll Test User',\n        email: 'payroll-test@example.com',\n        password: 'test123',\n        role: 'ADMIN'\n      }\n    })\n    createdUserId = testUser.id\n\n    // Create 2 active test employees\n    for (let i = 1; i <= 2; i++) {\n      const employee = await prisma.employee.create({\n        data: {\n          nama: `Test Employee ${i} ${Date.now()}`,\n          nik: `TEST${Date.now()}${i}`,\n          jabatan: 'Test Position',\n          site: 'Test Site',\n          kontrakUpahHarian: 150000,\n          defaultUangMakan: 25000,\n          defaultUangBbm: 20000,\n          aktif: true\n        }\n      })\n      createdEmployeeIds.push(employee.id)\n    }\n\n    // Now try to create payroll\n    const payrollData = {\n      periodeAwal: '2025-01-01',\n      periodeAkhir: '2025-01-31',\n      createdBy: createdUserId\n    }\n\n    const response = await fetch(`${process.env.VERCEL_URL || 'http://localhost:3000'}/api/payroll`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(payrollData)\n    })\n\n    const payrollResult = await response.json()\n\n    return NextResponse.json({\n      success: true,\n      message: 'Test employees and payroll setup completed',\n      data: {\n        employees: createdEmployeeIds,\n        user: createdUserId,\n        payrollResult: payrollResult\n      }\n    })\n\n  } catch (error: any) {\n    console.error('Test payroll creation error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: error.message || 'Failed to create test payroll setup',\n        details: error\n      },\n      { status: 500 }\n    )\n  }\n}"
